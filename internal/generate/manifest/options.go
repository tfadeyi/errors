package manifest

import (
	manifestYaml "github.com/tfadeyi/errors/internal/generate/manifest/yaml"
	"io"

	"github.com/tfadeyi/errors/internal/logging"
)

type (
	// Options is a struct contains all the configurations available for the parser
	Options struct {
		// Logger is the parser's logger
		// Option: func Logger(logger *logging.Logger) Option
		Logger *logging.Logger

		Output string

		// TargetManifestGenerator is the content generator used to generate the yaml error manifest.
		TargetManifestGenerator Target

		// CustomInfoTemplateFilepath path to the custom user template for errors manifest general info
		CustomInfoTemplateFilepath string

		// CustomErrorTemplateFilepath path to the custom user template for errors manifest errors
		CustomErrorTemplateFilepath string

		// GenerationWatermark is header sitting at the top of the output file
		GenerationWatermark string

		// Writer is parser internal writer
		Writer io.Writer
	}
	// Option is a more atomic to configure the different Options rather than passing the entire Options struct.
	Option func(p *Options)
)

// Logger configure the parser's logger
func Logger(logger *logging.Logger) Option {
	return func(e *Options) {
		log := logger.WithName("parser")
		e.Logger = &log
	}
}

func Output(dir string) Option {
	return func(e *Options) {
		e.Output = dir
	}
}

// Watermark configures the parser's generator to add the autogenerated header to generated files
func Watermark(header string) Option {
	return func(e *Options) {
		e.GenerationWatermark = header
	}
}

// CustomManifestInfoTemplate configures the parser's generator CustomInfoTemplateFilepath path to the custom user template for errors manifest errors
func CustomManifestInfoTemplate(filepath string) Option {
	return func(e *Options) {
		e.CustomInfoTemplateFilepath = filepath
	}
}

// CustomManifestErrorTemplate configures the parser's generator to add the autogenerated header to generated files
func CustomManifestErrorTemplate(filepath string) Option {
	return func(e *Options) {
		e.CustomErrorTemplateFilepath = filepath
	}
}

// Writer is the io.Writer the parser will write to
func Writer(w io.Writer) Option {
	return func(e *Options) {
		e.Writer = w
	}
}

// Custom configurations

// YAML returns the options.Option to run the parser generator for YAML
func YAML() Option {
	return func(opts *Options) {
		opts.TargetManifestGenerator = manifestYaml.New(&manifestYaml.Options{
			Logger: opts.Logger,
			Writer: opts.Writer,
			Output: opts.Output,
			Header: opts.GenerationWatermark,
		})
	}
}
