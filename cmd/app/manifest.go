package app

import (
	"bytes"
	"io"
	"os"

	"github.com/juju/errors"
	"github.com/spf13/cobra"
	commonoptions "github.com/tfadeyi/errors/cmd/app/options/common"
	manifestoptions "github.com/tfadeyi/errors/cmd/app/options/manifest"
	genoptions "github.com/tfadeyi/errors/cmd/app/options/manifest/generate"
	"github.com/tfadeyi/errors/internal/generate/manifest"
	"github.com/tfadeyi/errors/internal/logging"
	"github.com/tfadeyi/errors/internal/parser"
	"github.com/tfadeyi/errors/internal/parser/options"
)

func manifestCmd(common *commonoptions.Options) *cobra.Command {
	opts := manifestoptions.New(common)
	cmd := &cobra.Command{
		Use:   "manifest",
		Short: "manifest command",
		Long:  ``,
		PersistentPreRunE: func(cmd *cobra.Command, args []string) error {
			logger := logging.LoggerFromContext(cmd.Context())
			logger = logger.WithName("manifest")

			if err := opts.Complete(); err != nil {
				logger.Error(err, "flag argument error")
				return nil
			}
			if opts.LogLevel != "" {
				logger = logger.SetLevel(opts.LogLevel)
			}
			cmd.SetContext(logging.ContextWithLogger(cmd.Context(), logger))
			return nil
		},
	}
	opts = opts.Prepare(cmd)
	cmd.AddCommand(manifestGenerateCmd(opts))
	cmd.AddCommand(manifestValidateCmd(opts))
	return cmd
}

func manifestGenerateCmd(manOpts *manifestoptions.Options) *cobra.Command {
	opts := genoptions.New(manOpts)
	var inputReader io.ReadCloser
	cmd := &cobra.Command{
		Use:   "create",
		Short: "Generates the targeted application error manifest from a given source code",
		Long:  ``,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			logger := logging.LoggerFromContext(cmd.Context())
			logger = logger.WithName("create")

			if err := opts.Complete(); err != nil {
				return err
			}

			if opts.Source == "-" {
				inputReader = io.NopCloser(cmd.InOrStdin())
				opts.Source = ""
			}

			cmd.SetContext(logging.ContextWithLogger(cmd.Context(), logger))
			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			logger := logging.LoggerFromContext(cmd.Context())

			logger.Info("Parsing source code for @fyi error definitions ⚙️",
				"directories", opts.IncludedDirs,
			)

			parserOptions := []options.Option{
				options.Include(opts.IncludedDirs...),
				options.Logger(&logger),
				options.Output(opts.Output),
			}

			// check if source file was passed and updated the parer options
			if opts.Source != "" {
				parserOptions = append(parserOptions, options.SourceFile(opts.Source))
			}
			if inputReader != nil {
				parserOptions = append(parserOptions, options.SourceContent(inputReader))
			}

			// check language options
			switch opts.Language {
			default:
				parserOptions = append(parserOptions, options.Go())
			}

			p := parser.New(
				parserOptions...,
			)

			apps, err := p.ParseSource(cmd.Context())
			if err != nil {
				return errors.Annotate(err, "failed to parse the application(s) error manifests")
			}

			logger.Info("Source code was successfully parsed ✅")

			generatorOptions := []manifest.Option{
				manifest.Logger(&logger),
				manifest.Output(opts.Output),
				manifest.Watermark(`# Code generated by errctl: https://github.com/tfadeyi/errors.
# DO NOT EDIT.`),
				manifest.YAML(),
				manifest.Writer(cmd.OutOrStdout()),
			}

			gen := manifest.New(generatorOptions...)
			if err = gen.GenerateManifests(cmd.Context(), apps); err != nil {
				return errors.Annotate(err, "failed to printout the application(s) error manifests")
			}

			logger.Info("Application(s) error manifest were successfully generated ✅")

			return nil
		},
	}
	opts = opts.Prepare(cmd)
	return cmd
}

func manifestValidateCmd(opts *manifestoptions.Options) *cobra.Command {
	var inputReader io.Reader
	cmd := &cobra.Command{
		Use:   "validate",
		Short: "Validates a given application error manifest",
		Long:  ``,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			logger := logging.LoggerFromContext(cmd.Context())
			logger = logger.WithName("validate")

			if opts.Source == "" {
				return errors.New("missing file argument")
			}

			if opts.Source == "-" {
				inputReader = cmd.InOrStdin()
			} else {
				buf, err := os.ReadFile(opts.Source)
				if err != nil {
					return err
				}
				inputReader = bytes.NewReader(buf)
			}

			cmd.SetContext(logging.ContextWithLogger(cmd.Context(), logger))
			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			logger := logging.LoggerFromContext(cmd.Context())

			logger.Info("Validating application error manifest", "file", opts.Source)
			_, err := manifest.ValidateFromReader(inputReader)
			if err != nil {
				logger.Error(err, "Application error manifest contains errors")
				return nil
			}
			logger.Info("Application error manifest is valid")
			return nil
		},
	}
	opts = opts.Prepare(cmd)
	return cmd
}
